# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    sorter.c.caca                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: rude-jes <rude-jes@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/11/02 15:43:37 by rude-jes          #+#    #+#              #
#    Updated: 2023/11/06 12:26:48 by rude-jes         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "../push_swap.h"

void	sort_triple(t_list **a)
{
	int	size;
	int	*nb[3];

	size = 3;
	while (size-- > 0)
		nb[size] = (int *)ft_lstget(*a, size)->content;
	if (*nb[0] < *nb[1] && *nb[1] < *nb[2] && *nb[0] < *nb[2])
		return ;
	else if ((*nb[0] > *nb[1] && *nb[1] < *nb[2] && *nb[0] < *nb[2])
		|| (*nb[0] > *nb[1] && *nb[1] > *nb[2] && *nb[0] > *nb[2])
		|| (*nb[0] < *nb[1] && *nb[1] > *nb[2] && *nb[0] < *nb[2]))
	{
		handler("sa", a, 0);
		sort_triple(a);
	}
	else if ((*nb[0] > *nb[1] && *nb[1] < *nb[2] && *nb[0] > *nb[2]))
	{
		handler("ra", a, 0);
		sort_triple(a);
	}
	else
	{
		handler("rra", a, 0);
		sort_triple(a);
	}
}

//	Case of n stack <= 10
//	First, push 2 first numbers from a to b
//	Then, check nearest min-max of a and rotate until getting it
//	If it's the min
//		Rotate b until the nearest bigger
//		Push a to b
//	If it's the max
//		Rotate b until the b-max is idx 0
//		Push a to b
//	If stack a is empty
//		Rotate b until the b-max is idx 0
//		Push b to a until b is empty
int	sort_algo(t_list **a, t_list **b)
{
	int	size;
	int	(*target)(t_list *a);

	size = ft_lstsize(*a);
	while (ft_lstsize(*a))
	{
		while (ft_lstsize(*b) < 2)
			handler("pb", a, b);
		target = getleastnb;
		if (((getmostnb(*a) - getleastnb(*a) + size) % size) <= ((getleastnb(*a) - getmostnb(*a) + size) % size))
			target = getmostnb;
		go_to(a, b, "a", target(*a));
		if (target == getleastnb)
		{
			go_to(a, b, "b", getnearest(*b, *((int *)(*a)->content)));
			if (*((int *)(*a)->content) < *((int *)(*b)->content))
				handler("rb", a, b);
		}
		else
		{
			go_to(a, b, "b", getnearest(*b, *((int *)(*a)->content)));
			if (*((int *)(*a)->content) < *((int *)(*b)->content))
				handler("rb", a, b);
		}
		handler("pb", a, b);
	}
	go_to(a, b, "b", getmostnb(*b));
	size = ft_lstsize(*b);
	while (size-- > 0)
		handler("pa", a, b);
	return (0);
}

/*
//	Case of n stack  <= 100
int	sort_hundred(t_list **a, t_list **b)
{

}

//	Case of n stack > 100
//	May be less optimized than using sort_triple, sort_algo and sort_hundred
int	sort_plus(t_list **a, t_list **b)
{
	
}
*/

void	sort(t_list **a, t_list **b)
{
	int	lstsize;

	lstsize = ft_lstsize(*a);
	if (lstsize == 3)
		sort_triple(a);
	else if (lstsize == 2)
		handler("sa", a, b);
	else if (lstsize)
		sort_algo(a, b);
}
